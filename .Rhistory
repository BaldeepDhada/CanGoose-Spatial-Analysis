getwd()
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
# setwd("/Users/yujinxin/Documents/UBC MDS/Data 589/ ")
# Load Oreoscoptes data
df <- read.csv("/data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
# setwd("/Users/yujinxin/Documents/UBC MDS/Data 589/ ")
# Load Oreoscoptes data
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
View(df)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
load("data/BC_Covariates.Rda")
coord <- df[,c('decimalLatitude','decimalLongitude')]
# Clean the data by removing the observations with NA
coord <- na.omit(coord)
coordinates(coord)<- ~decimalLongitude+decimalLatitude
proj4string(coord) <- CRS("+proj=longlat +datum=WGS84")
coord_conv <- spTransform(coord,CRS("+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"))
View(DATA)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
load("data/BC_Covariates.Rda")
coord <- df[,c('decimalLatitude','decimalLongitude')]
# Clean the data by removing the observations with NA
coord <- na.omit(coord)
coordinates(coord)<- ~decimalLongitude+decimalLatitude
proj4string(coord) <- CRS("+proj=longlat +datum=WGS84")
coord_conv <- spTransform(coord,CRS("+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"))
win = as.owin(DATA$Window)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
load("data/BC_Covariates.Rda")
coord <- df[,c('decimalLatitude','decimalLongitude')]
# Clean the data by removing the observations with NA
coord <- na.omit(coord)
coordinates(coord)<- ~decimalLongitude+decimalLatitude
proj4string(coord) <- CRS("+proj=longlat +datum=WGS84")
coord_conv <- spTransform(coord,CRS("+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"))
win = as.owin(DATA$Window)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
load("data/BC_Covariates.Rda")
coord <- df[,c('decimalLatitude','decimalLongitude')]
# Clean the data by removing the observations with NA
coord <- na.omit(coord)
coordinates(coord)<- ~decimalLongitude+decimalLatitude
proj4string(coord) <- CRS("+proj=longlat +datum=WGS84")
coord_conv <- spTransform(coord,CRS("+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"))
window <-  as.owin(DATA$Window)
str(DATA)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
library(maptools)
install.packages(maptools)
install.packages("maptools")
setRepositories()
install.packages("maptools")
install.packages("maptools")
install.packages("rgdal")
install.packages(rgdal)
install.packages("rgdal")
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
library(maptools)
# library(rgdal)
library(splines)
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
load("data/BC_Covariates.Rda")
coord <- df[,c('decimalLatitude','decimalLongitude')]
# Clean the data by removing the observations with NA
coord <- na.omit(coord)
coordinates(coord) <- ~decimalLongitude+decimalLatitude
proj4string(coord) <- CRS("+proj=longlat +datum=WGS84")
coord_conv <- spTransform(coord,CRS("+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"))
window <-  as.owin(DATA$Window)
# create ppp object with coordination and the window
ppp_goose <- ppp(coord_conv@coords[,1],
coord_conv@coords[,2],
window=window)
# Load required packages
library(sp)
library(dplyr)
library(sf)
library(spatstat)
# library(maptools)
# library(rgdal)
library(splines)
df <- read.csv("data/Samples_CG/cg_10k_samples.csv", stringsAsFactors = FALSE)
load("data/BC_Covariates.Rda")
coord <- df[,c('decimalLatitude','decimalLongitude')]
# Clean the data by removing the observations with NA
coord <- na.omit(coord)
coordinates(coord) <- ~decimalLongitude+decimalLatitude
proj4string(coord) <- CRS("+proj=longlat +datum=WGS84")
coord_conv <- spTransform(coord,CRS("+proj=aea +lat_0=45 +lon_0=-126 +lat_1=50 +lat_2=58.5 +x_0=1000000 +y_0=0 +datum=NAD83 +units=m +no_defs"))
window <-  as.owin(DATA$Window)
# create ppp object with coordination and the window
ppp_goose <- ppp(coord_conv@coords[,1],
coord_conv@coords[,2],
window=window)
plot(ppp_goose)
# check homogeneity
Q <- quadratcount(ppp_goose, nx=10, ny=10)
quadrat.test(Q)
# check homogeneity
Q <- quadratcount(ppp_goose, nx=5, ny=5)
quadrat.test(Q)
# check homogeneity
Q <- quadratcount(ppp_goose, nx=2, ny=2)
quadrat.test(Q)
# check homogeneity
Q <- quadratcount(ppp_goose, nx=3, ny=3)
quadrat.test(Q)
# check homogeneity
Q <- quadratcount(ppp_goose, nx=3, ny=2)
quadrat.test(Q)
# hot spot analysis to indentify areas of elevated intensity
R <- bw.ppl(ppp_goose)
LR <- scanLRTS(ppp_goose, r = R)
plot(LR)
sapply(DATA, class)
#Visualise each potential covariate using methods appropriate to each object class.
potential <- c("Window", "Elevation", "Forest", "HFI", "Dist_Water")
for (i in potential){
plot(DATA[[i]], main = i)
points(ppp_goose$x, ppp_goose$y, pch = 19, col = "white", cex = 0.6)
points(ppp_goose$x, ppp_goose$y, pch = 19, col = "black", cex = 0.4)
}
# Check relationships between potential covariates via kernel estimation by rhohat
rho_elev <- rhohat(ppp_goose, DATA$Elevation)
rho_fore <- rhohat(ppp_goose, DATA$Forest)
rho_hfi <- rhohat(ppp_goose, DATA$HFI)
rho_dist_water <- rhohat(ppp_goose, DATA$Dist_Water)
plot(rho_elev, xlim = c(0, max(DATA$Elevation)))
plot(rho_fore, xlim = c(0, max(DATA$Forest)))
plot(rho_hfi, xlim = c(0, max(DATA$HFI)))
plot(rho_dist_water, xlim = c(0, max(DATA$Dist_Water)))
